// <auto-generated />
using System;
using Backend.DB;
using Backend.DB.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(DrivingLicenseContext))]
    partial class DrivingLicenseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.DB.Models.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("classID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"));

                    b.Property<bool>("ClassType")
                        .HasColumnType("bit")
                        .HasColumnName("classType");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("courseID");

                    b.Property<int>("MentorId")
                        .HasColumnType("int")
                        .HasColumnName("mentorID");

                    b.HasKey("ClassId");

                    b.HasIndex("CourseId");

                    b.HasIndex("MentorId");

                    b.ToTable("Class", (string)null);
                });

            modelBuilder.Entity("Backend.DB.Models.Course", b =>
                {
                    b.Property<string>("CourseId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("courseID");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("endDate");

                    b.Property<int>("LimitStudent")
                        .HasColumnType("int")
                        .HasColumnName("limitStudent");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("name");

                    b.Property<int?>("NumberOfStudents")
                        .HasColumnType("int")
                        .HasColumnName("numberOfStudents");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startDate");

                    b.HasKey("CourseId");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("Backend.DB.Models.Exam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("examID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamId"));

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("courseID");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("createdTime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int>("LimitKeyQuestion")
                        .HasColumnType("int")
                        .HasColumnName("limitKeyQuestion");

                    b.Property<int>("LimitQuestion")
                        .HasColumnType("int")
                        .HasColumnName("limitQuestion");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staffID");

                    b.HasKey("ExamId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StaffId");

                    b.ToTable("Exam", (string)null);
                });

            modelBuilder.Entity("Backend.DB.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("feedbackID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("classID");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<string>("CreatedStudentId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("createdStudentID");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("createdTime");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("FeedbackId");

                    b.HasIndex("ClassId");

                    b.HasIndex("CreatedStudentId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("Backend.DB.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("imageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("studentID");

                    b.HasKey("ImageId");

                    b.HasIndex("StudentId");

                    b.ToTable("Image", (string)null);
                });

            modelBuilder.Entity("Backend.DB.Models.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("lessonID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessonId"));

                    b.Property<bool?>("Attendance")
                        .HasColumnType("bit")
                        .HasColumnName("attendance");

                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("classID");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime")
                        .HasColumnName("endTime");

                    b.Property<double?>("Hours")
                        .HasColumnType("float")
                        .HasColumnName("hours");

                    b.Property<double?>("Kilometers")
                        .HasColumnType("float")
                        .HasColumnName("kilometers");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime")
                        .HasColumnName("startTime");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("studentID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("LessonId");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("Lesson", (string)null);
                });

            modelBuilder.Entity("Backend.DB.Models.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("memberID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberId"));

                    b.Property<DateTime>("CardProvidedDate")
                        .HasColumnType("date")
                        .HasColumnName("cardProvidedDate");

                    b.Property<string>("CardProvidedLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cardProvidedLocation");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<string>("DrivingLicenseNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("drivingLicenseNumber");

                    b.Property<DateTime?>("DrivingLicenseProvidedDate")
                        .HasColumnType("date")
                        .HasColumnName("drivingLicenseProvidedDate");

                    b.Property<string>("DrivingLicenseProvider")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("drivingLicenseProvider");

                    b.Property<string>("DrivingLicenseTier")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("drivingLicenseTier");

                    b.Property<string>("DrivingTestTier")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("drivingTestTier");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("char(6)")
                        .HasColumnName("gender")
                        .IsFixedLength();

                    b.Property<string>("IntegratedDrivingLicense")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("integratedDrivingLicense");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nationality");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("date")
                        .HasColumnName("registrationDate");

                    b.Property<string>("RelatedDocument")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("relatedDocument");

                    b.Property<string>("ResidenceAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("residenceAddress_");

                    b.Property<string>("RevokedDrivingLicense")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("revokedDrivingLicense");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.HasKey("MemberId");

                    b.HasIndex(new[] { "DrivingLicenseNumber" }, "UC_DrivingLicenseNumber")
                        .IsUnique()
                        .HasFilter("[drivingLicenseNumber] IS NOT NULL");

                    b.HasIndex(new[] { "DrivingLicenseTier" }, "UC_DrivingLicenseTier")
                        .IsUnique()
                        .HasFilter("[drivingLicenseTier] IS NOT NULL");

                    b.HasIndex(new[] { "DrivingTestTier" }, "UC_DrivingTestTier")
                        .IsUnique()
                        .HasFilter("[drivingTestTier] IS NOT NULL");

                    b.HasIndex(new[] { "IntegratedDrivingLicense" }, "UC_IntegratedDrivingLicense")
                        .IsUnique()
                        .HasFilter("[integratedDrivingLicense] IS NOT NULL");

                    b.HasIndex(new[] { "UserId" }, "UC_Member_User")
                        .IsUnique();

                    b.HasIndex(new[] { "RevokedDrivingLicense" }, "UC_RevokedDrivingLicense")
                        .IsUnique()
                        .HasFilter("[revokedDrivingLicense] IS NOT NULL");

                    b.ToTable("Member", (string)null);
                });

            modelBuilder.Entity("Backend.DB.Models.Mentor", b =>
                {
                    b.Property<int>("MentorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("mentorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MentorId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("phone")
                        .IsFixedLength();

                    b.Property<string>("ResidenceAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("residenceAddress");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.HasKey("MentorId");

                    b.HasIndex(new[] { "Email" }, "UC_MentorEmail")
                        .IsUnique();

                    b.HasIndex(new[] { "Phone" }, "UC_MentorPhone")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "UC_Mentor_User")
                        .IsUnique();

                    b.ToTable("Mentor", (string)null);
                });

            modelBuilder.Entity("Backend.DB.Models.News", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("newsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NewsId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("createdTime");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staffID");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("title");

                    b.HasKey("NewsId");

                    b.HasIndex("StaffId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Backend.DB.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("questionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<bool>("CorrectAnswer")
                        .HasColumnType("bit")
                        .HasColumnName("correctAnswer");

                    b.Property<string>("Image")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("image");

                    b.Property<bool>("KeyQuestion")
                        .HasColumnType("bit")
                        .HasColumnName("keyQuestion");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staffID");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("QuestionId");

                    b.HasIndex("StaffId");

                    b.ToTable("Question", (string)null);
                });

            modelBuilder.Entity("Backend.DB.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("roleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("roleName");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Backend.DB.Models.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("staffID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit")
                        .HasColumnName("isAdmin");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("password");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    b.HasKey("StaffId");

                    b.HasIndex(new[] { "Email" }, "UC_StaffEmail")
                        .IsUnique()
                        .HasFilter("[email] IS NOT NULL");

                    b.HasIndex(new[] { "UserId" }, "UC_Staff_User")
                        .IsUnique();

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("Backend.DB.Models.Student", b =>
                {
                    b.Property<string>("StudentId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("studentID");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("courseID");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("memberID");

                    b.HasKey("StudentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("MemberId");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("Backend.DB.Models.StudentAnswer", b =>
                {
                    b.Property<int>("StudentAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("studentAnswerID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentAnswerId"));

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("bit")
                        .HasColumnName("isCorrect");

                    b.Property<int?>("OptionId")
                        .HasColumnType("int")
                        .HasColumnName("optionID");

                    b.Property<int>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("testID");

                    b.HasKey("StudentAnswerId");

                    b.HasIndex("TestId");

                    b.ToTable("StudentAnswer", (string)null);
                });

            modelBuilder.Entity("Backend.DB.Models.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("testID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestId"));

                    b.Property<int>("ExamId")
                        .HasColumnType("int")
                        .HasColumnName("examID");

                    b.Property<bool?>("Pass")
                        .HasColumnType("bit")
                        .HasColumnName("pass");

                    b.Property<int?>("Score")
                        .HasColumnType("int")
                        .HasColumnName("score");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("studentID");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("testName");

                    b.Property<DateTime>("TestTime")
                        .HasColumnType("datetime")
                        .HasColumnName("testTime");

                    b.HasKey("TestId");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentId");

                    b.ToTable("Test", (string)null);
                });

            modelBuilder.Entity("Backend.DB.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("createTime");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fullName");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("phone")
                        .IsFixedLength();

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleID");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UC_Email")
                        .IsUnique()
                        .HasFilter("[email] IS NOT NULL");

                    b.HasIndex(new[] { "Phone" }, "UC_Phone")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("ClassStudent", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("classID");

                    b.Property<string>("StudentId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("studentID");

                    b.HasKey("ClassId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("ClassStudent", (string)null);
                });

            modelBuilder.Entity("TestQuestion", b =>
                {
                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("questionID");

                    b.Property<int>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("testID");

                    b.HasKey("QuestionId", "TestId");

                    b.HasIndex("TestId");

                    b.ToTable("TestQuestion", (string)null);
                });

            modelBuilder.Entity("Backend.DB.Models.Class", b =>
                {
                    b.HasOne("Backend.DB.Models.Course", "Course")
                        .WithMany("Classes")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_Class_Course");

                    b.HasOne("Backend.DB.Models.Mentor", "Mentor")
                        .WithMany("Classes")
                        .HasForeignKey("MentorId")
                        .IsRequired()
                        .HasConstraintName("FK_Class_Mentor");

                    b.Navigation("Course");

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("Backend.DB.Models.Exam", b =>
                {
                    b.HasOne("Backend.DB.Models.Course", "Course")
                        .WithMany("Exams")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_Exam_Course");

                    b.HasOne("Backend.DB.Models.Staff", "Staff")
                        .WithMany("Exams")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("FK_Exam_Staff");

                    b.Navigation("Course");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Backend.DB.Models.Feedback", b =>
                {
                    b.HasOne("Backend.DB.Models.Class", "Class")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FK_Feedback_Class");

                    b.HasOne("Backend.DB.Models.Student", "CreatedStudent")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CreatedStudentId")
                        .IsRequired()
                        .HasConstraintName("FK_Feedback_Student");

                    b.Navigation("Class");

                    b.Navigation("CreatedStudent");
                });

            modelBuilder.Entity("Backend.DB.Models.Image", b =>
                {
                    b.HasOne("Backend.DB.Models.Student", "Student")
                        .WithMany("Images")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_Image_Student");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Backend.DB.Models.Lesson", b =>
                {
                    b.HasOne("Backend.DB.Models.Class", "Class")
                        .WithMany("Lessons")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FK_Lesson_Class");

                    b.HasOne("Backend.DB.Models.Student", "Student")
                        .WithMany("Lessons")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_Lesson_Student");

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Backend.DB.Models.Member", b =>
                {
                    b.HasOne("Backend.DB.Models.User", "User")
                        .WithOne("Member")
                        .HasForeignKey("Backend.DB.Models.Member", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Member_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.DB.Models.Mentor", b =>
                {
                    b.HasOne("Backend.DB.Models.User", "User")
                        .WithOne("Mentor")
                        .HasForeignKey("Backend.DB.Models.Mentor", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Mentor_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.DB.Models.News", b =>
                {
                    b.HasOne("Backend.DB.Models.Staff", "Staff")
                        .WithMany("News")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("FK_News_Staff");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Backend.DB.Models.Question", b =>
                {
                    b.HasOne("Backend.DB.Models.Staff", "Staff")
                        .WithMany("Questions")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("FK_Question_Staff");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Backend.DB.Models.Staff", b =>
                {
                    b.HasOne("Backend.DB.Models.User", "User")
                        .WithOne("Staff")
                        .HasForeignKey("Backend.DB.Models.Staff", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Staff_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.DB.Models.Student", b =>
                {
                    b.HasOne("Backend.DB.Models.Course", "Course")
                        .WithMany("Students")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_Student_Course");

                    b.HasOne("Backend.DB.Models.Member", "Member")
                        .WithMany("Students")
                        .HasForeignKey("MemberId")
                        .IsRequired()
                        .HasConstraintName("FK_Student_Member");

                    b.Navigation("Course");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Backend.DB.Models.StudentAnswer", b =>
                {
                    b.HasOne("Backend.DB.Models.Test", "Test")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("TestId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentAnswer_Test");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Backend.DB.Models.Test", b =>
                {
                    b.HasOne("Backend.DB.Models.Exam", "Exam")
                        .WithMany("Tests")
                        .HasForeignKey("ExamId")
                        .IsRequired()
                        .HasConstraintName("FK_Test_Exam");

                    b.HasOne("Backend.DB.Models.Student", "Student")
                        .WithMany("Tests")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_Test_Student");

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Backend.DB.Models.User", b =>
                {
                    b.HasOne("Backend.DB.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ClassStudent", b =>
                {
                    b.HasOne("Backend.DB.Models.Class", null)
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FK_ClassStudent_Class");

                    b.HasOne("Backend.DB.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_ClassStudent_Student");
                });

            modelBuilder.Entity("TestQuestion", b =>
                {
                    b.HasOne("Backend.DB.Models.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_TestQuestion_Question");

                    b.HasOne("Backend.DB.Models.Test", null)
                        .WithMany()
                        .HasForeignKey("TestId")
                        .IsRequired()
                        .HasConstraintName("FK_TestQuestion_Test");
                });

            modelBuilder.Entity("Backend.DB.Models.Class", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("Backend.DB.Models.Course", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Exams");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Backend.DB.Models.Exam", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("Backend.DB.Models.Member", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Backend.DB.Models.Mentor", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("Backend.DB.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Backend.DB.Models.Staff", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("News");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Backend.DB.Models.Student", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Images");

                    b.Navigation("Lessons");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("Backend.DB.Models.Test", b =>
                {
                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("Backend.DB.Models.User", b =>
                {
                    b.Navigation("Member");

                    b.Navigation("Mentor");

                    b.Navigation("Staff");
                });
#pragma warning restore 612, 618
        }
    }
}
